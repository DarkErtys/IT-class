#include <sys/socket.h>
#include <arpa/inet.h> // for creating Internet address
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>

void error(char *msg){
    fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    exit(1);
}

int listener_d; // This will store the main listener socket for server.

void handle_shutdown(int sig){ 
    /*
     * If someone hits Ctrl-C when the server
     * is running, this function will close the 
     * socket before the program ends.
     */
    if (listener_d)
        close(listener_d);
    fprintf(stderr, "Bye!\n");
    exit(0);
}

int read_in(int socket, char *buf, int len){ // This reads all the characters until it reaches ‘\n’.
    char *s = buf;
    int slen = len;
    int c = recv(socket, s, slen, 0);
    while ((c > 0) && (s[c-1] != '\n')) {
        s += c; slen -= c;
        c = recv(socket, s, slen, 0);
    }
    if (c < 0)
        return c; // In case there’s an error
    else if (c == 0)
        buf[0] = '\0'; // Nothing read; send back an empty string.
    else
        s[c-1]='\0'; // Replace the '\r' character with a '\0'
    return len - slen;
}

int open_listener_socket(){
    int s = socket(PF_INET, SOCK_STREAM, 0); // Create an Internet streaming socket.
    if (s == -1)
        error("Can't open socket");
    return s;
}

void bind_to_port(int socket, int port){
    struct sockaddr_in name;
    name.sin_family = PF_INET;
    name.sin_port = (in_port_t)htons(30000);
    name.sin_addr.s_addr = htonl(INADDR_ANY);
    int reuse = 1;
    if (setsockopt(socket, SOL_SOCKET, SO_REUSEADDR, (char *)&reuse, sizeof(int)) == -1)
        error("Can't set the reuse option on the socket");
        int c = bind (socket, (struct sockaddr *) &name, sizeof(name)); // Grab port 30000.
    if (c == -1)
        error("Can't bind to socket");
}

int say(int socket, char *s){
    int result = send(socket, s, strlen(s), 0);
    if (result == -1)
        fprintf(stderr, "%s: %s\n", "Error talking to the client", strerror(errno));
    return result;
}


int main(int argc, char const* argv[])
{
    char *advice[] = {
        "Take smaller bites\r\n",
        "Go for the tight jeans. No they do NOT make you look fat.\r\n",
        "One word: inappropriate\r\n",
        "Just for today, be honest. Tell your boss what you *really* think\r\n",
        "You might want to rethink that haircut\r\n"
    };
    int listener_d = socket(PF_INET, SOCK_STREAM, 0); // Create a socket
    struct sockaddr_in name;
    name.sin_family = PF_INET;
    name.sin_port = (in_port_t)htons(30000);
    name.sin_addr.s_addr = htonl(INADDR_ANY);

    /*
     * When you bind a socket to a port, the operating system will
     * prevent anything else from rebinding to it for the next 30
     * seconds or so, and that includes the program that bound the port
     * in the first place. To get around the problem, you just need to set
     * an option on the socket before you bind it:
     */

    int reuse = 1;
    if (setsockopt(listener_d, SOL_SOCKET, SO_REUSEADDR, (char *)&reuse, sizeof(int)) == -1)
        error("Can't set the reuse option on the socket");

    if (bind (listener_d, (struct sockaddr *) &name, sizeof(name)) == -1) // Bind the socket to port 30000
        error("Can't bind the port");

    listen(listener_d, 10);
    puts("Waiting for connection");
    while (1) {
        struct sockaddr_storage client_addr;
        unsigned int address_size = sizeof(client_addr);
        int connect_d = accept (listener_d, (struct sockaddr *)&client_addr, &address_size); // Accept a connection from a client
        char *msg = advice[rand() % 5];
        send(connect_d, msg, strlen(msg), 0); // Begin talking to the client.
        close(connect_d);
    }

    return 0;

}
